from bs4 import BeautifulSoup
import cv2
import subprocess
import os
import sys
from PIL import Image
import pytesseract
from tesseract_word_class import Tesseract_Word

def parse_image_info(sub_text):
    return_list = []
    all_spans = sub_text.find_all("span")
    for a_span in all_spans:

        # sometimes em tag is contained in strong tag which is contained in span tag. The em tag contains the text
        # so we are checking if that is not the case
        corresponding_text = ""
        strong_tag = a_span.find('strong')

        if not type(strong_tag) == type(None):
            em_tag = strong_tag.find('em')
            if not type(em_tag) == type(None):
              corresponding_text = em_tag.text
            else:
                corresponding_text = a_span.text
        else:
            corresponding_text = a_span.text

        # the attribute title of span tag contains the bounding box and some other information that we do not want
        list_of_text = a_span.attrs["title"].split(" ")
        # in the hocr file that is generated by tesseract there is one duplicate line. but we can identify it using the heuristics that
        # the duplicate line contains a word "baseline" , therefore we are removing it
        if not "baseline" in list_of_text:
            bounding_box = [int(list_of_text[1]), int(list_of_text[2]), int(list_of_text[3]), int(list_of_text[4][:-1])]
            return_list.append(Tesseract_Word(corresponding_text, bounding_box))
    return return_list

def parse_hocr(all_hocr_contents, named_list_path):
    all_file_names = []
    all_text = []

    with open(named_list_path, 'r') as f:
        all_file_names = f.read().split("\n")
    if "" in all_file_names:
        all_file_names.remove("")
    
    souped_content = BeautifulSoup(all_hocr_contents, "html.parser")

    for i, a_file_name in enumerate(all_file_names):
        '''
        Find the div containing the information on the image
        '''
        height, width = cv2.imread(a_file_name).shape[:2]
        img_title = 'image "{}"; bbox 0 0 {} {}; ppageno {}'.format(a_file_name, str(width), str(height), i)
        
        found_div = souped_content.find("div", title=img_title)
        image_contents = parse_image_info(found_div)
        all_text.append(image_contents)
    return all_text

def get_word_bounding_box(images_to_process, additional_arguments = []):
    named_list_path = os.path.dirname(images_to_process[0])
    named_file_base_name = os.path.basename(named_list_path)
    final_named_list_path = os.path.join(named_list_path, named_file_base_name + ".txt")
    '''
    Creating named list file
    '''
    named_list = ""
    for an_image in images_to_process:
        if named_list == "":
            named_list = "{}".format(an_image)
        else:
            named_list = named_list + "\n{}".format(an_image)
    '''
    Writing to named list file
    '''
    with open(final_named_list_path , "w") as f:
        f.write(named_list)

    custom_oem_psm_config = r'--oem 1 --psm 7'
    #os.system("ls -l /tmp/tesseract_lib/bin")
    pytesseract.pytesseract.tesseract_cmd = r'/tmp/tesseract_lib/bin/tesseract'
    hocr_content = pytesseract.image_to_pdf_or_hocr(final_named_list_path, extension='hocr',config=custom_oem_psm_config)
    final_output = parse_hocr(hocr_content, final_named_list_path)
    
    return final_output
